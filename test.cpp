LogError(TEXT("BlueprintNativeEvent functions cannot be replicated!") );
LogError(TEXT("A function cannot be both BlueprintNativeEvent and BlueprintImplementableEvent!") );
LogError(TEXT("A function cannot be both BlueprintNativeEvent and a Blueprint Property accessor!"));
LogError(TEXT("A Private function cannot be a BlueprintNativeEvent!") );
LogError(TEXT("BlueprintImplementableEvent functions cannot be replicated!") );
LogError(TEXT("A function cannot be both BlueprintNativeEvent and BlueprintImplementableEvent!") );
LogError(TEXT("A function cannot be both BlueprintImplementableEvent and a Blueprint Property accessor!"));
LogError(TEXT("A Private function cannot be a BlueprintImplementableEvent!") );
LogError(TEXT("Exec functions cannot be replicated!") );
LogError(TEXT("Exec functions cannot be replicated!") );
LogError(TEXT("Function cannot be a blueprint event and a blueprint getter."));
LogError(TEXT("Function cannot be a blueprint event and a blueprint setter."));
LogError(TEXT("Static functions can't be replicated"));
LogError(TEXT("Replicated function: 'reliable' or 'unreliable' is required"));
LogError(TEXT("'reliable' and 'unreliable' are mutually exclusive"));
LogError(TEXT("'reliable' specified without 'client' or 'server'"));
LogError(TEXT("'unreliable' specified without 'client' or 'server'"));
LogError(TEXT("SealedEvent may only be used on events"));
LogError(TEXT("SealedEvent cannot be used on Blueprint events"));
LogError(TEXT("BlueprintPure (or BlueprintPure=true) and BlueprintPure=false should not both appear on the same function, they are mutually exclusive"));
LogError(TEXT("Immutable is being phased out in favor of SerializeNative, and is only legal on the mirror structs declared in UObject"));
LogError(TEXT("Blueprint Property getter function %s must not have parameters."), *TargetFuncDef->GetName());
LogError(TEXT("Blueprint Property getter function %s must have return value of type %s%s."), *TargetFuncDef->GetName(), *CPPType, *ExtendedCPPType);
LogError(TEXT("Blueprint Property setter function cannot be a blueprint event."));
LogError(TEXT("Blueprint Property getter function must be pure."));
LogError(TEXT("Blueprint Property setter function %s must not have a return value."), *TargetFuncDef->GetName());
LogError(TEXT("Blueprint Property setter function %s must have exactly one parameter of type %s%s."), *TargetFuncDef->GetName(), *CPPType, *ExtendedCPPType);
LogError(TEXT("Blueprint Property setter function cannot be a blueprint event."));
LogError(TEXT("Blueprint Property setter function must be blueprint callable."));
LogError(TEXT("Blueprint Property setter function must not be pure."));
LogError(TEXT("Replication notification function %s must not have return value."), *TargetFuncDef->GetName());
LogError(TEXT("Replication notification function %s has too many parameters."), *TargetFuncDef->GetName());
LogError(TEXT("Replication notification function %s has invalid parameter for property %s. First (optional) parameter must be of type %s%s."), *TargetFuncDef->GetName(), *ParmDef->GetName(), *CPPType, *ExtendedCPPType);
LogError(TEXT("Replication notification function %s (optional) second parameter must be of type 'const TArray<uint8>&'"), *TargetFuncDef->GetName());
LogError(TEXT("Replication notification function %s not found"), *PropertyDef.GetRepNotifyFunc().ToString() );
LogError(TEXT("Blueprint Property getter function %s not found"), *GetterFuncName);
LogError(TEXT("Blueprint Property setter function %s not found"), *SetterFuncName);
LogError(TEXT("UProperties should not be wrapped by WITH_EDITOR, use WITH_EDITORONLY_DATA instead."));
LogError(TEXT("Cannot specify an editor only property inside an optional class."));
LogError(TEXT("Found more than one edit/visibility specifier (%s), only one is allowed"), *Specifier.Key);
LogError(TEXT("Found more than one edit/visibility specifier (%s), only one is allowed"), *Specifier.Key);
LogError(TEXT("Found more than one edit/visibility specifier (%s), only one is allowed"), *Specifier.Key);
LogError(TEXT("Found more than one edit/visibility specifier (%s), only one is allowed"), *Specifier.Key);
LogError(TEXT("Found more than one edit/visibility specifier (%s), only one is allowed"), *Specifier.Key);
LogError(TEXT("Found more than one edit/visibility specifier (%s), only one is allowed"), *Specifier.Key);
LogError(TEXT("Cannot specify a property as being both BlueprintReadOnly and BlueprintReadWrite."));
LogError(TEXT("BlueprintReadWrite should not be used on private members"));
LogError(TEXT("Blueprint exposed struct members cannot be editor only"));
LogError(TEXT("Cannot specify a property as being both BlueprintReadOnly and having a BlueprintSetter."));
LogError(TEXT("Cannot specify BlueprintSetter for a struct member."));
LogError(TEXT("Cannot specify both BlueprintReadOnly and BlueprintReadWrite or BlueprintSetter."), *Specifier.Key);
LogError(TEXT("BlueprintReadOnly should not be used on private members"));
LogError(TEXT("Blueprint exposed struct members cannot be editor only"));
LogError(TEXT("Cannot specify BlueprintGetter for a struct member."));
LogError(TEXT("The Localized specifier is deprecated"));
LogError(TEXT("EditInline is deprecated. Remove it, or use Instanced instead."));
LogError(TEXT("Struct members cannot be replicated"));
LogError(TEXT("Only Struct members can be marked NotReplicated"));
LogError(TEXT("'RepRetry' is deprecated."));
LogError(TEXT("Unknown variable specifier '%s'"), *Specifier.Key);
LogError(TEXT("Only parameters in service request functions can be marked NotReplicated"));
LogError(TEXT("Unknown variable specifier '%s'"), *Specifier.Key);
LogError(TEXT("bool bitfields are not supported."));
LogError(TEXT("Replicated maps are not supported."));
LogError(TEXT("Replicated sets are not supported."));
LogError(TEXT("RigVM Struct '%s' - Member '%s' is editor only - WITH_EDITORONLY_DATA not allowed on structs with RIGVM_METHOD."), *StructDef.GetName(), *Parameter.Name, *MemberCPPType);
LogError(TEXT("RigVM Struct '%s' - Member '%s' type '%s' not supported by RigVM."), *StructDef.GetName(), *Parameter.Name, *MemberCPPType);
LogError(TEXT("RigVM Struct '%s' - has zero members - invalid RIGVM_METHOD."), *StructDef.GetName());
LogError(TEXT("RigVM Struct '%s' - has %d members (64 is the limit)."), *StructDef.GetName(), StructRigVMInfo.Members.Num());
LogError(TEXT("Maps are not supported in an RPC."));
LogError(TEXT("Sets are not supported in an RPC."));
LogError(TEXT("Replicated functions cannot contain out parameters"));
LogError(TEXT("Only service request functions cannot contain NoReplication parameters"));
LogError(TEXT("Replicated functions cannot contain delegate parameters (this would be insecure)"));
LogError(TEXT("Replicated FString parameters must be passed by const reference"));
LogError(TEXT("Replicated TArray parameters must be passed by const reference"));
LogError(TEXT("Service request functions cannot contain out parameters, unless marked NotReplicated"));
LogError(TEXT("Service request functions cannot contain delegate parameters, unless marked NotReplicated"));
LogError(TEXT("Paramater name '%s' in function is invalid, '%s' is a reserved name."), *InvalidName, *InvalidName);
LogError(TEXT("Multi-cast delegates function signatures must not return a value"));
LogError(TEXT("BlueprintPure specifier is not allowed for interface functions"));
LogError(TEXT("An explicit Category specifier is required for Blueprint accessible functions in an Engine module."));
LogError(TEXT("Interfaces that are not implementable in blueprints cannot have Blueprint Event members."));
LogError(TEXT("Blueprint implementable interfaces cannot contain BlueprintCallable functions that are not BlueprintImplementableEvents. Add NotBlueprintable to the interface if you wish to keep this function."));
LogError(TEXT("BlueprintNativeEvent functions must be non-virtual."));
LogError(TEXT("Interface functions cannot be declared 'final'"));
LogError(TEXT("%s: Override of UFUNCTION in parent class (%s) cannot have a UFUNCTION() declaration above it; it will use the same parameters as the original declaration."), *FuncDef.GetNameCPP(), *OverriddenFunctionDef->GetOuter()->GetName());
LogError(TEXT("BlueprintPure specifier is not allowed for functions with no return value and no output parameters."));
LogError(TEXT("Property is using a deprecated class: %s.  Property should be marked deprecated as well."), *ClassDef->GetPathName());
LogError(TEXT("Function is using a deprecated class: %s.  Function should be marked deprecated as well."), *ClassDef->GetPathName());
LogError(TEXT("Sets are not supported for Replication or RPCs.  Set %s in %s.  Origin %s"), *PropertyDef->GetName(), *PropertyDef->GetOuter()->GetName(), *OriginStructName);
LogError(TEXT("Maps are not supported for Replication or RPCs.  Map %s in %s.  Origin %s"), *PropertyDef->GetName(), *PropertyDef->GetOuter()->GetName(), *OriginStructName);
LogError(TEXT("An explicit Category specifier is required for any property exposed to the editor or Blueprints in an Engine module."));
LogError(TEXT("Property cannot have 'DisableEditOnInstance' without being editable"));
LogError(TEXT("Property cannot have 'DisableEditOnTemplate' without being editable"));
LogError(TEXT("ExposeOnSpawn - Property cannot be exposed"));
LogError(TEXT("Enum '%s' does not provide a tooltip / comment (DocumentationPolicy)."), *EnumDef.GetName());
LogError(TEXT("Enum entry '%s::%s' does not provide a tooltip / comment (DocumentationPolicy)."), *EnumDef.GetName(), *(*EntryName));
LogError(TEXT("Enum entries '%s::%s' and '%s::%s' have identical tooltips / comments (DocumentationPolicy)."), *EnumDef.GetName(), *(*ExistingEntry), *EnumDef.GetName(), *(*EntryName));
LogError(TEXT("Struct '%s' does not provide a tooltip / comment (DocumentationPolicy)."), *StructDef.GetName());
LogError(TEXT("Property '%s::%s' does not provide a tooltip / comment (DocumentationPolicy)."), *StructDef.GetName(), *PropertyDef->GetName());
LogError(TEXT("Property '%s::%s' and '%s::%s' are using identical tooltips (DocumentationPolicy)."), *StructDef.GetName(), *ExistingPropertyName->ToString(), *StructDef.GetName(), *PropertyDef->GetName());
LogError(TEXT("Property '%s::%s' does not provide a valid UIMin / UIMax (DocumentationPolicy)."), *StructDef.GetName(), *PropertyDef->GetName());
LogError(TEXT("Function '%s::%s' does not provide a tooltip / comment (DocumentationPolicy)."), *ClassDef->GetName(), *FunctionDef->GetName());
LogError(TEXT("Functions '%s::%s' and '%s::%s' uses identical tooltips / comments (DocumentationPolicy)."), *ClassDef->GetName(), *(*ExistingFuncName).ToString(), *ClassDef->GetName(), *FunctionDef->GetName());
LogError(TEXT("Function '%s::%s' does not provide a tooltip / comment (DocumentationPolicy)."), *ClassDef.GetName(), *FunctionDef.GetName());
LogError(TEXT("Function '%s::%s' does not provide a comment (DocumentationPolicy)."), *ClassDef.GetName(), *FunctionDef.GetName());
LogError(TEXT("Function '%s::%s' doesn't provide a tooltip for parameter '%s' (DocumentationPolicy)."), *ClassDef.GetName(), *FunctionDef.GetName(), *ParamName.ToString());
LogError(TEXT("Function '%s::%s' provides a tooltip for an unknown parameter '%s' (DocumentationPolicy)."), *ClassDef.GetName(), *FunctionDef.GetName(), *Pair.Key.ToString());
LogError(TEXT("Function '%s::%s' uses identical tooltips for parameters '%s' and '%s' (DocumentationPolicy)."), *ClassDef.GetName(), *FunctionDef.GetName(), *ExistingParam->ToString(), *Pair.Key.ToString());
LogError(TEXT("%s usage in member declaration detected [[[%s]]].  This is disallowed for the target/module, consider %s as an alternative."), PointerTypeDesc, *PointerTypeDecl, AlternativeTypeDesc);
LogError(TEXT("%s usage in member declaration detected [[[%s]]]."), PointerTypeDesc, *PointerTypeDecl);